// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc-tls-bccsp.proto

/*
Package grpctlsbccsp is a generated protocol buffer package.

It is generated from these files:
	grpc-tls-bccsp.proto

It has these top-level messages:
	ConfigOpts
	Config
	SwOpts
	AdditionalPkcs11Opts
	DummyKeystoreOpts
*/
package grpctlsbccsp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConfigOpts struct {
	Opts string `protobuf:"bytes,1,opt,name=opts" json:"opts,omitempty"`
}

func (m *ConfigOpts) Reset()                    { *m = ConfigOpts{} }
func (m *ConfigOpts) String() string            { return proto.CompactTextString(m) }
func (*ConfigOpts) ProtoMessage()               {}
func (*ConfigOpts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConfigOpts) GetOpts() string {
	if m != nil {
		return m.Opts
	}
	return ""
}

type Config struct {
	Provider   string                `protobuf:"bytes,1,opt,name=Provider" json:"Provider,omitempty"`
	Swopts     *SwOpts               `protobuf:"bytes,2,opt,name=swopts" json:"swopts,omitempty"`
	Pkcs11Opts *AdditionalPkcs11Opts `protobuf:"bytes,3,opt,name=pkcs11opts" json:"pkcs11opts,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Config) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *Config) GetSwopts() *SwOpts {
	if m != nil {
		return m.Swopts
	}
	return nil
}

func (m *Config) GetPkcs11Opts() *AdditionalPkcs11Opts {
	if m != nil {
		return m.Pkcs11Opts
	}
	return nil
}

type SwOpts struct {
	// Default algorithms when not specified (Deprecated?)
	SecLevel         int32              `protobuf:"varint,1,opt,name=SecLevel" json:"SecLevel,omitempty"`
	HashFamily       string             `protobuf:"bytes,2,opt,name=HashFamily" json:"HashFamily,omitempty"`
	Ephemeral        bool               `protobuf:"varint,3,opt,name=Ephemeral" json:"Ephemeral,omitempty"`
	FileKeystoreOpts string             `protobuf:"bytes,4,opt,name=FileKeystoreOpts" json:"FileKeystoreOpts,omitempty"`
	Dummy            *DummyKeystoreOpts `protobuf:"bytes,5,opt,name=dummy" json:"dummy,omitempty"`
}

func (m *SwOpts) Reset()                    { *m = SwOpts{} }
func (m *SwOpts) String() string            { return proto.CompactTextString(m) }
func (*SwOpts) ProtoMessage()               {}
func (*SwOpts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SwOpts) GetSecLevel() int32 {
	if m != nil {
		return m.SecLevel
	}
	return 0
}

func (m *SwOpts) GetHashFamily() string {
	if m != nil {
		return m.HashFamily
	}
	return ""
}

func (m *SwOpts) GetEphemeral() bool {
	if m != nil {
		return m.Ephemeral
	}
	return false
}

func (m *SwOpts) GetFileKeystoreOpts() string {
	if m != nil {
		return m.FileKeystoreOpts
	}
	return ""
}

func (m *SwOpts) GetDummy() *DummyKeystoreOpts {
	if m != nil {
		return m.Dummy
	}
	return nil
}

type AdditionalPkcs11Opts struct {
	Library    string `protobuf:"bytes,1,opt,name=Library" json:"Library,omitempty"`
	Label      string `protobuf:"bytes,2,opt,name=Label" json:"Label,omitempty"`
	Pin        string `protobuf:"bytes,3,opt,name=Pin" json:"Pin,omitempty"`
	Sensitive  bool   `protobuf:"varint,4,opt,name=Sensitive" json:"Sensitive,omitempty"`
	SoftVerify bool   `protobuf:"varint,5,opt,name=SoftVerify" json:"SoftVerify,omitempty"`
}

func (m *AdditionalPkcs11Opts) Reset()                    { *m = AdditionalPkcs11Opts{} }
func (m *AdditionalPkcs11Opts) String() string            { return proto.CompactTextString(m) }
func (*AdditionalPkcs11Opts) ProtoMessage()               {}
func (*AdditionalPkcs11Opts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AdditionalPkcs11Opts) GetLibrary() string {
	if m != nil {
		return m.Library
	}
	return ""
}

func (m *AdditionalPkcs11Opts) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *AdditionalPkcs11Opts) GetPin() string {
	if m != nil {
		return m.Pin
	}
	return ""
}

func (m *AdditionalPkcs11Opts) GetSensitive() bool {
	if m != nil {
		return m.Sensitive
	}
	return false
}

func (m *AdditionalPkcs11Opts) GetSoftVerify() bool {
	if m != nil {
		return m.SoftVerify
	}
	return false
}

type DummyKeystoreOpts struct {
}

func (m *DummyKeystoreOpts) Reset()                    { *m = DummyKeystoreOpts{} }
func (m *DummyKeystoreOpts) String() string            { return proto.CompactTextString(m) }
func (*DummyKeystoreOpts) ProtoMessage()               {}
func (*DummyKeystoreOpts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*ConfigOpts)(nil), "grpctlsbccsp.ConfigOpts")
	proto.RegisterType((*Config)(nil), "grpctlsbccsp.Config")
	proto.RegisterType((*SwOpts)(nil), "grpctlsbccsp.SwOpts")
	proto.RegisterType((*AdditionalPkcs11Opts)(nil), "grpctlsbccsp.AdditionalPkcs11Opts")
	proto.RegisterType((*DummyKeystoreOpts)(nil), "grpctlsbccsp.DummyKeystoreOpts")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GrpcBccspManager service

type GrpcBccspManagerClient interface {
	GetConfig(ctx context.Context, in *ConfigOpts, opts ...grpc.CallOption) (*Config, error)
	SetConfig(ctx context.Context, in *ConfigOpts, opts ...grpc.CallOption) (*Config, error)
}

type grpcBccspManagerClient struct {
	cc *grpc.ClientConn
}

func NewGrpcBccspManagerClient(cc *grpc.ClientConn) GrpcBccspManagerClient {
	return &grpcBccspManagerClient{cc}
}

func (c *grpcBccspManagerClient) GetConfig(ctx context.Context, in *ConfigOpts, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/grpctlsbccsp.GrpcBccspManager/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcBccspManagerClient) SetConfig(ctx context.Context, in *ConfigOpts, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/grpctlsbccsp.GrpcBccspManager/SetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GrpcBccspManager service

type GrpcBccspManagerServer interface {
	GetConfig(context.Context, *ConfigOpts) (*Config, error)
	SetConfig(context.Context, *ConfigOpts) (*Config, error)
}

func RegisterGrpcBccspManagerServer(s *grpc.Server, srv GrpcBccspManagerServer) {
	s.RegisterService(&_GrpcBccspManager_serviceDesc, srv)
}

func _GrpcBccspManager_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcBccspManagerServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctlsbccsp.GrpcBccspManager/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcBccspManagerServer).GetConfig(ctx, req.(*ConfigOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcBccspManager_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcBccspManagerServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctlsbccsp.GrpcBccspManager/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcBccspManagerServer).SetConfig(ctx, req.(*ConfigOpts))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrpcBccspManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpctlsbccsp.GrpcBccspManager",
	HandlerType: (*GrpcBccspManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _GrpcBccspManager_GetConfig_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _GrpcBccspManager_SetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc-tls-bccsp.proto",
}

func init() { proto.RegisterFile("grpc-tls-bccsp.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xc1, 0xae, 0xd3, 0x30,
	0x10, 0x24, 0xbc, 0x97, 0x90, 0x2c, 0x1c, 0x8a, 0xc9, 0x21, 0xaa, 0x10, 0x54, 0x39, 0x55, 0x88,
	0x56, 0x6a, 0x11, 0x47, 0x0e, 0x14, 0x68, 0x91, 0x28, 0xa2, 0x72, 0x24, 0xee, 0x4e, 0xe2, 0xb6,
	0x16, 0x4e, 0x6c, 0xd9, 0xa6, 0x55, 0xfe, 0x82, 0x13, 0x7f, 0xc4, 0x7f, 0x21, 0x3b, 0xa1, 0x4d,
	0xd5, 0x9e, 0xb8, 0x79, 0xc7, 0x33, 0xbb, 0x33, 0xab, 0x85, 0x78, 0xa7, 0x64, 0x31, 0x31, 0x5c,
	0x4f, 0xf2, 0xa2, 0xd0, 0x72, 0x2a, 0x95, 0x30, 0x02, 0x3d, 0xb1, 0xa8, 0xe1, 0xda, 0x61, 0xe9,
	0x08, 0xe0, 0x83, 0xa8, 0xb7, 0x6c, 0xf7, 0x4d, 0x1a, 0x8d, 0x10, 0xdc, 0x0b, 0x69, 0x74, 0xe2,
	0x8d, 0xbc, 0x71, 0x84, 0xdd, 0x3b, 0xfd, 0xed, 0x41, 0xd0, 0x52, 0xd0, 0x10, 0xc2, 0x8d, 0x12,
	0x07, 0x56, 0x52, 0xd5, 0x51, 0x4e, 0x35, 0x7a, 0x0d, 0x81, 0x3e, 0x3a, 0xf1, 0xc3, 0x91, 0x37,
	0x7e, 0x3c, 0x8f, 0xa7, 0xfd, 0x39, 0xd3, 0xec, 0x68, 0x07, 0xe0, 0x8e, 0x83, 0x16, 0x00, 0xf2,
	0x47, 0xa1, 0x67, 0x33, 0xa7, 0xb8, 0x73, 0x8a, 0xf4, 0x52, 0xf1, 0xbe, 0x2c, 0x99, 0x61, 0xa2,
	0x26, 0x7c, 0xe3, 0x98, 0x4e, 0xdf, 0x53, 0xa5, 0x7f, 0x3c, 0x08, 0xda, 0xb6, 0xd6, 0x58, 0x46,
	0x8b, 0x35, 0x3d, 0x50, 0xee, 0x8c, 0xf9, 0xf8, 0x54, 0xa3, 0x17, 0x00, 0x9f, 0x89, 0xde, 0x2f,
	0x49, 0xc5, 0x78, 0xe3, 0xcc, 0x45, 0xb8, 0x87, 0xa0, 0xe7, 0x10, 0x7d, 0x92, 0x7b, 0x5a, 0x51,
	0x45, 0xb8, 0x73, 0x12, 0xe2, 0x33, 0x80, 0x5e, 0xc1, 0x60, 0xc9, 0x38, 0xfd, 0x42, 0x1b, 0x6d,
	0x84, 0xa2, 0x76, 0x5a, 0x72, 0xef, 0x7a, 0x5c, 0xe1, 0xe8, 0x2d, 0xf8, 0xe5, 0xcf, 0xaa, 0x6a,
	0x12, 0xdf, 0xe5, 0x79, 0x79, 0x99, 0xe7, 0xa3, 0xfd, 0xea, 0xf3, 0x71, 0xcb, 0xb6, 0x0b, 0x8e,
	0x6f, 0x85, 0x45, 0x09, 0x3c, 0x5a, 0xb3, 0x5c, 0x11, 0xd5, 0x74, 0xdb, 0xfe, 0x57, 0xa2, 0x18,
	0xfc, 0x35, 0xc9, 0x29, 0xef, 0xe2, 0xb4, 0x05, 0x1a, 0xc0, 0xdd, 0x86, 0xd5, 0x2e, 0x43, 0x84,
	0xed, 0xd3, 0x66, 0xcb, 0x68, 0xad, 0x99, 0x61, 0x07, 0xea, 0x6c, 0x87, 0xf8, 0x0c, 0xd8, 0xcd,
	0x64, 0x62, 0x6b, 0xbe, 0x53, 0xc5, 0xb6, 0xad, 0xe9, 0x10, 0xf7, 0x90, 0xf4, 0x19, 0x3c, 0xbd,
	0x32, 0x3d, 0xff, 0xe5, 0xc1, 0x60, 0xa5, 0x64, 0xb1, 0xb0, 0xa1, 0xbe, 0x92, 0x9a, 0xec, 0xa8,
	0x42, 0xef, 0x20, 0x5a, 0x51, 0xd3, 0x5d, 0x49, 0x72, 0x99, 0xfb, 0x7c, 0x5e, 0xc3, 0xf8, 0xd6,
	0x4f, 0xfa, 0xc0, 0xca, 0xb3, 0xff, 0x97, 0xe7, 0x81, 0x3b, 0xec, 0x37, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x4a, 0xe9, 0x44, 0x42, 0xf0, 0x02, 0x00, 0x00,
}
